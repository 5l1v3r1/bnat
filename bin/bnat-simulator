#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'bnat'
require 'logger'

unless Process.uid == 0
  raise 'You are not running as root, you need these rights for low-level packet control'
end

logger = Logger.new(STDOUT)
logger.level = Logger::DEBUG

port = 1337

config = PacketFu::Utils.whoami?()

logger.debug("Starting Capture on #{config[:iface]}...")
logger.debug("Scan me at #{config[:ip_saddr]}")

cap = PacketFu::Capture.new(
  :iface => config[:iface], :start => true,
  :filter => "tcp and dst #{config[:ip_saddr]} and port 1337 and tcp[13] == 2"
)

begin

  # We're using the BNAT::Firewall to suppress
  # RSTs that will be generated by the OS because 
  # the service isn't really listening, we're 
  # just manually faking everything
  firewall = BNAT::Firewall.new()
  logger.debug("Detected #{firewall.type} firewall")
  logger.debug("Suppressing RSTs")
  firewall.suppress_rsts

  # Continue looping through packets that match
  # our filter and responding to them
  listen=Thread.new do
    loop do
      pkt = cap.next
    
      if pkt.nil?
        sleep 0.1
        next
      end

      synpkt = PacketFu::Packet.parse(pkt)
      logger.debug("Received SYN from #{synpkt.ip_saddr}")
      synackpkt = PacketFu::TCPPacket.new(
        :config=> config,
        :timeout=> 0.1,
        :flavor=>"Windows"
      )
       
      # Feel free to hard code any of the 
      # attributes in the reply you'd like
      # to forge.
      synackpkt.ip_saddr=synpkt.ip_daddr
      synackpkt.ip_daddr=synpkt.ip_saddr
      synackpkt.eth_saddr=synpkt.eth_daddr
      synackpkt.eth_daddr=synpkt.eth_saddr
      synackpkt.tcp_sport=synpkt.tcp_dport
      synackpkt.tcp_dport=synpkt.tcp_sport
      synackpkt.tcp_flags.syn=1
      synackpkt.tcp_flags.ack=1
      synackpkt.tcp_ack=synpkt.tcp_seq+1
      synackpkt.tcp_seq=rand(64511)+1024
      synackpkt.tcp_win=183
      synackpkt.recalc
      synackpkt.to_w

      logger.debug("Sent SYN/ACK to #{synpkt.ip_daddr}")
    end
  end

  listen.join

ensure
  logger.debug("Removing RST Suppression Rules")  
  firewall.remove_rules
end
