#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'bnat'
require 'logger'

logger = Logger.new(STDOUT)
logger.level = Logger::DEBUG

config = PacketFu::Utils.whoami?()

logger.debug("Starting Capture on #{config[:iface]}...")
logger.debug("Scan me at #{config[:ip_saddr]}")

cap = PacketFu::Capture.new(
  :iface => config[:iface], :start => true,
  :filter => "tcp and dst #{config[:ip_saddr]} and tcp[13] == 2"
)

listen=Thread.new do
  loop do
    cap.stream.each do |pkt|
      synpkt = PacketFu::Packet.parse(pkt)
      logger.debug("Received SYN from #{synpkt.ip_saddr}")
      synackpkt = PacketFu::TCPPacket.new(
        :config=> config,
        :timeout=> 0.1,
        :flavor=>"Windows"
      )
       
      # Feel free to hard code any of the 
      # attributes in the reply you'd like
      # to forge.
      synackpkt.ip_saddr=synpkt.ip_daddr
      synackpkt.ip_daddr=synpkt.ip_saddr
      synackpkt.eth_saddr=synpkt.eth_daddr
      synackpkt.eth_daddr=synpkt.eth_saddr
      synackpkt.tcp_sport=synpkt.tcp_dport
      synackpkt.tcp_dport=synpkt.tcp_sport
      synackpkt.tcp_flags.syn=1
      synackpkt.tcp_flags.ack=1
      synackpkt.tcp_ack=synpkt.tcp_seq+1
      synackpkt.tcp_seq=rand(64511)+1024
      synackpkt.tcp_win=183
      synackpkt.recalc
      synackpkt.to_w

      logger.debug("Sent SYN/ACK to #{synpkt.ip_daddr}")
    end
  end
end

listen.join
